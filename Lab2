II





CREATE TABLE regions AS SELECT * FROM hr.regions;
CREATE TABLE countries AS SELECT * FROM hr.countries;
CREATE TABLE locations AS SELECT * FROM hr.locations;
CREATE TABLE departments AS SELECT * FROM hr.departments;
CREATE TABLE jobs AS SELECT * FROM hr.jobs;
CREATE TABLE employees AS SELECT * FROM hr.employees;
CREATE TABLE job_history AS SELECT * FROM hr.job_history;
CREATE TABLE job_grades AS SELECT * FROM hr.job_grades;
CREATE TABLE SALES AS SELECT * FROM hr.sales;
CREATE TABLE PRODUCTS AS SELECT * FROM hr.products;

ALTER TABLE COUNTRIES ADD CONSTRAINT regions_pk PRIMARY KEY (COUNTRY_ID);
ALTER TABLE DEPARTMENTS ADD CONSTRAINT department_pk PRIMARY KEY (DEPARTMENT_ID);
ALTER TABLE EMPLOYEES ADD CONSTRAINT employee_pk PRIMARY KEY (EMPLOYEE_ID);
ALTER TABLE JOB_GRADES ADD CONSTRAINT job_grades_pk PRIMARY KEY (GRADE);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT job_history_pk PRIMARY KEY (EMPLOYEE_ID, START_DATE);
ALTER TABLE JOBS ADD CONSTRAINT jobs_pk PRIMARY KEY (JOB_ID);
ALTER TABLE LOCATIONS ADD CONSTRAINT locations_pk PRIMARY KEY (LOCATION_ID);
ALTER TABLE REGIONS ADD CONSTRAINT regions_pkk PRIMARY KEY (REGION_ID);
ALTER TABLE SALES ADD CONSTRAINT sales_pk PRIMARY KEY (SALE_ID);
ALTER TABLE PRODUCTS ADD CONSTRAINT product_pk PRIMARY KEY (PRODUCT_ID);

ALTER TABLE departments ADD CONSTRAINT departments_fk_location FOREIGN KEY (location_id) REFERENCES locations(location_id);
ALTER TABLE departments ADD CONSTRAINT departments_fk_manager FOREIGN KEY (manager_id) REFERENCES employees(employee_id);
ALTER TABLE employees ADD CONSTRAINT employees_fk_department FOREIGN KEY (department_id) REFERENCES departments(department_id);
ALTER TABLE employees ADD CONSTRAINT employees_fk_job FOREIGN KEY (job_id) REFERENCES jobs(job_id);
ALTER TABLE employees ADD CONSTRAINT employees_fk_manager FOREIGN KEY (manager_id) REFERENCES employees(employee_id);
ALTER TABLE locations ADD CONSTRAINT locations_fk_country FOREIGN KEY (country_id) REFERENCES countries(country_id);
ALTER TABLE countries ADD CONSTRAINT countries_fk_region FOREIGN KEY (region_id) REFERENCES regions(region_id);
ALTER TABLE SALES ADD CONSTRAINT sales_fk_employees FOREIGN KEY (employee_id) REFERENCES employees(employee_id);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT job_history_fk_department_id FOREIGN KEY (department_id) REFERENCES DEPARTMENTS(department_id);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT job_history_fk_employee_id FOREIGN KEY (employee_id) REFERENCES EMPLOYEES(employee_id);
ALTER TABLE JOB_HISTORY ADD CONSTRAINT job_history_fk_job_id FOREIGN KEY (JOB_ID) REFERENCES JOBS(JOB_ID);


1.


2..
SELECT 
    first_name || ' ' || last_name AS imie_nazwisko,
    salary,
    phone_number
FROM employees
WHERE SUBSTR(last_name, 3, 1) = 'e'
  AND LOWER(first_name) LIKE LOWER('%an%')
ORDER BY 1 DESC, 2 ASC;

3.

4.
SELECT 
    first_name || ' ' || last_name AS imie_nazwisko,
    ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) AS liczba_miesiecy,
    CASE
        WHEN MONTHS_BETWEEN(SYSDATE, hire_date) < 150 THEN salary * 0.10
        WHEN MONTHS_BETWEEN(SYSDATE, hire_date) BETWEEN 150 AND 200 THEN salary * 0.20
        ELSE salary * 0.30
    END AS wysokosc_dodatku
FROM employees
ORDER BY liczba_miesiecy; 

5.
SELECT 
    department_id,
    SUM(salary) AS suma_zarobkow,
    ROUND(AVG(salary)) AS srednia_zarobkow
FROM employees
GROUP BY department_id
HAVING MIN(salary) > 5000;


6.

SELECT 
    e.last_name,
    e.department_id,
    d.department_name,
    e.job_id
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN locations l ON d.location_id = l.location_id
WHERE l.city = 'Toronto';


7

SELECT 
    e.first_name || ' ' || e.last_name AS jennifer,
    c.first_name || ' ' || c.last_name AS wspolpracownik
FROM employees e
JOIN employees c 
     ON e.department_id = c.department_id
WHERE e.first_name = 'Jennifer'
  AND e.employee_id <> c.employee_id;


8


9.

SELECT 
    e.first_name || ' ' || e.last_name AS imie_nazwisko,
    e.job_id,
    d.department_name,
    e.salary,
    g.grade_level
FROM employees e
JOIN departments d ON e.department_id = d.department_id
JOIN job_grades g 
     ON e.salary BETWEEN g.lowest_sal AND g.highest_sal;


10. 

SELECT 
    e.first_name || ' ' || e.last_name AS imie_nazwisko,
    e.salary
FROM employees e
WHERE e.salary > (SELECT AVG(salary) FROM employees)
ORDER BY e.salary DESC;


11.

SELECT e.employee_id,
       e.first_name || ' ' || e.last_name AS imie_nazwisko
FROM employees e
WHERE e.department_id IN (
    SELECT DISTINCT department_id
    FROM employees
    WHERE last_name LIKE '%u%'
)
ORDER BY e.department_id, e.employee_id;

12.
SELECT first_name || ' ' || last_name AS imie_nazwisko,
       hire_date,
       ROUND(MONTHS_BETWEEN(SYSDATE, hire_date)) AS liczba_miesiecy
FROM employees
WHERE MONTHS_BETWEEN(SYSDATE, hire_date) >
      (SELECT AVG(MONTHS_BETWEEN(SYSDATE, hire_date)) FROM employees)
ORDER BY liczba_miesiecy DESC;

13.
SELECT 
    d.department_name,
    COUNT(e.employee_id) AS liczba_pracownikow,
    ROUND(AVG(e.salary)) AS srednie_wynagrodzenie
FROM departments d
LEFT JOIN employees e ON d.department_id = e.department_id
GROUP BY d.department_name
ORDER BY liczba_pracownikow DESC;
